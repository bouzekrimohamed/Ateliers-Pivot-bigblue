from flask import Flask, request
import paramiko
import os
import traceback

app = Flask(__name__)

@app.route("/upload", methods=["POST"])
def upload():
    # V√©rifie la pr√©sence du fichier
    if 'file' not in request.files:
        return "‚ùå Aucun fichier re√ßu", 400

    f = request.files["file"]
    local_path = f.filename

    try:
        # Sauvegarde temporaire du fichier
        f.save(local_path)
        print(f"üìÇ Fichier re√ßu : {local_path} ({os.path.getsize(local_path)} octets)")

        # --- CONFIG SFTP ---
        host = "mft-int.int.kn"        # üîß serveur r√©el de prod
        port = 22
        username = "esr_multiclient"
        password = "*Esr2024!"         # ‚ö†Ô∏è √† v√©rifier si c‚Äôest bien le mot de passe actif
        remote_path = f"/pub/inbound/{local_path}"

        # --- CONNEXION SFTP ---
        print(f"üîå Connexion SFTP vers {host}:{port} ...")
        transport = paramiko.Transport((host, port))
        transport.connect(username=username, password=password)
        sftp = paramiko.SFTPClient.from_transport(transport)

        # --- ENVOI DU FICHIER ---
        print(f"‚¨ÜÔ∏è Envoi du fichier vers {remote_path} ...")
        sftp.put(local_path, remote_path)
        print("‚úÖ Fichier transf√©r√© avec succ√®s !")

        # --- FERMETURE ---
        sftp.close()
        transport.close()

        # --- NETTOYAGE ---
        if os.path.exists(local_path):
            os.remove(local_path)

        return "‚úÖ Fichier envoy√© avec succ√®s sur le SFTP", 200

    except Exception as e:
        print("üí• Erreur SFTP :", str(e))
        traceback.print_exc()

        # Nettoyage du fichier temporaire s‚Äôil existe
        if os.path.exists(local_path):
            os.remove(local_path)

        return f"‚ùå Erreur SFTP : {str(e)}", 500


if __name__ == "__main__":
    # Serveur HTTPS local pour √©viter le blocage GitHub Pages (Mixed Content)
    print("üöÄ Serveur Flask lanc√© sur https://localhost:5000 (HTTPS activ√©)")
    app.run(debug=True, port=5000, ssl_context='adhoc')
